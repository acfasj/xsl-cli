#! /usr/bin/env node

const fs = require('fs')
const path = require('path')
const util = require('util')
const axios = require('axios')
const url = require('url')
const readFile = util.promisify(fs.readFile)
const program = require('commander')

program.option('-s, --src [src]', '源地址').parse(process.argv)
const args = program.args
let srcBase = args[0] || program.src
const downloadDir = path.resolve(process.cwd(), 'xsl-pad-download')
const extNameList = ['', '.html', '.css', '.js', '.json', '.txt', '.md']

async function handle(pathname, srcBase, dstBase) {
  let str
  try {
    str = await readFile(pathname, 'utf-8')
  } catch (e) {
    console.log(`读取文件错误: ${pathname}`)
  }

  const list = getPathList(str)
  if (!list || list.length === 0) return

  list.forEach(filePath => {
    const isFull = isFullUrl(filePath)
    let src
    let dst
    if (isFull) {
      src = filePath
      dst = path.resolve(downloadDir, path.basename(new URL(filePath).pathname))
    } else {
      src = url.resolve(srcBase, filePath)
      dst = path.resolve(dstBase, filePath)
    }

    axios({
      url: src,
      method: 'GET',
      responseType: 'stream',
    })
      .then(res => {
        // 不覆盖已经存在的文件
        if (!fs.existsSync(dst)) {
          // 确保路径存在
          ensureDir(dst)
          const writer = fs.createWriteStream(dst, { flags: 'wx' })
          writer.on('error', e => {
            if (e.code !== 'EEXIST') {
              console.log(`写入失败: ${src}`)
            }
          })
          writer.on('finish', () => {
            console.log(`写入成功: ${dst}`)
          })
          res.data.pipe(writer)
        }
      })
      .catch(e => {
        console.log(`抓取文件失败: ${src}`)
        console.log(e.toString())
      })
  })
}

function getPathList(str) {
  // (js|json|css|png|jpg|jepg|m4a|ogg|mp3|mp4)
  const RE = /["']((http[s]?:\/\/)?(\.?[\/\.\w]+\.(js|json|html|css|png|jpg|jepg|m4a|ogg|mp3|mp4)))["']/gi
  const list = []
  let matched
  while ((matched = RE.exec(str)) !== null && matched.length > 0) {
    list.push(matched[1])
  }

  // unique
  return [...new Set(list)]
}

function travel(dir, cb) {
  fs.readdirSync(dir).forEach(file => {
    var pathname = path.join(dir, file)

    if (fs.statSync(pathname).isDirectory()) {
      travel(pathname, cb)
    } else if (isText(pathname)) {
      cb(pathname)
    }
  })
}

function isFullUrl(url) {
  return /http|https/.test(url)
}

function isText(pathname) {
  const extname = path.extname(pathname)
  return extNameList.indexOf(extname) > -1
}

function ensureDir(filepath) {
  const dirname = path.dirname(filepath)
  if (fs.existsSync(dirname)) return true
  fs.mkdirSync(dirname, { recursive: true })
}

;(function main() {
  if (!srcBase) {
    console.log('缺少 src 参数, `xsl pad http://example.com`')
    process.exit(1)
  }

  if (!isFullUrl(srcBase)) {
    console.log('参数不合法')
    process.exit(1)
  }

  // 奇怪 url.resolve 为什么这样的不拼接
  // https://nodejs.org/dst/latest-v10.x/docs/api/url.html#url_url_resolve_from_to
  if (!srcBase.endsWith('/')) {
    srcBase += '/'
  }

  if (!fs.existsSync(downloadDir)) {
    fs.mkdirSync(downloadDir)
  }

  const rootdir = process.cwd()
  travel(rootdir, function(pathname) {
    handle(pathname, srcBase, rootdir)
  })
})()
